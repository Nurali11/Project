generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleType {
  ADMIN
  SUPER_ADMIN
  CASHER
  WAITER
  OWNER
}

model Region {
  id         String       @id @default(uuid())
  name       String
  user       User[]
  restaurant Restaurant[]
  createdAt  DateTime     @default(now())
}

model User {
  id        String   @id @default(uuid())
  name      String
  phone     String
  role      RoleType
  password  String
  balans    Float    @default(0)
  Region    Region?  @relation(fields: [regionId], references: [id])
  regionId  String?
  createdAt DateTime @default(now())
}

model Restaurant {
  id         String     @id @default(uuid())
  name       String
  tip        Float
  address    String
  phone      String
  isActive   Boolean    @default(true)
  balance    Float      @default(0)
  Products   Product[]
  Categories Category[]
  Orders     Order[]
  Withdraws  Withdraw[]
  Debts      Debt[]
  createdAt  DateTime   @default(now())
  Region     Region?    @relation(fields: [regionId], references: [id])
  regionId   String?
}

model Category {
  id           String      @id @default(uuid())
  name         String
  isActive     Boolean
  Products     Product[]
  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId String?
  createdAt    DateTime    @default(now())
}

model Product {
  id           String      @id @default(uuid())
  name         String
  price        Float
  isActive     Boolean
  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId String?
  Category     Category?   @relation(fields: [categoryId], references: [id])
  categoryId   String?
  OrderItem    OrderItem[]
  createdAt    DateTime    @default(now())
}

enum OrderStatus {
  PENDING
  PAID
  DEBT
}

model Order {
  id           String      @id @default(uuid())
  table        String
  total        Float       @default(0)
  status       OrderStatus @default(PENDING)
  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId String?
  Debts        Debt[]
  Withdraws    Withdraw[]
  OrderItems   OrderItem[] @relation("OrderToOrderItems")
  createdAt    DateTime    @default(now())
}

model OrderItem {
  id      String @id @default(uuid())
  order   Order  @relation("OrderToOrderItems", fields: [orderId], references: [id])
  orderId String

  product   Product @relation(fields: [productId], references: [id])
  productId String

  quantity  Int
  createdAt DateTime @default(now())
}

enum WithdrawType {
  INCOME
  OUTCOME
}

model Withdraw {
  id   String       @id @default(uuid())
  type WithdrawType

  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId String?

  Order   Order?  @relation(fields: [orderId], references: [id])
  orderId String?

  createdAt DateTime @default(now())
}

model Debt {
  id       String @id @default(uuid())
  username String
  amount   Float

  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId String?

  Order   Order?  @relation(fields: [orderId], references: [id])
  orderId String?

  createdAt DateTime @default(now())
}
